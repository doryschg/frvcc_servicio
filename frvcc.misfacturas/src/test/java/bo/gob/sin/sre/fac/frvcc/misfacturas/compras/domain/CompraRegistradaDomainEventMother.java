package bo.gob.sin.sre.fac.frvcc.misfacturas.compras.domain;

import bo.gob.sin.sre.fac.frvcc.misfacturas.model.compras.*;
import bo.gob.sin.sre.fac.frvcc.misfacturas.shared.domain.compra.CompraRegistradaDomainEvent;

public final class CompraRegistradaDomainEventMother {
    public static CompraRegistradaDomainEvent registrar(
            CompraId id,
            CompraRecepcionId recepcionId,
            CompraSecuencia secuencia,
            CompraTipoDocumentoId tipoDocumentoId,
            CompraFechaFactura fechaFactura,
            CompraIfcProveedorNb ifcProveedorNb,
            CompraNitProveedor nitProveedor,
            CompraRazonSocialProveedor razonSocialProveedor,
            CompraNumeroFactura numeroFactura,
            CompraNumeroDui numeroDui,
            CompraCodigoAutorizacion codigoAutorizacion,
            CompraImporteTotalCompra importeTotalCompra,
            CompraImporteNoSujetoCf importeNoSujetoCf,
            CompraSubtotal subtotal,
            CompraDescuento descuento,
            CompraImporteBaseCf importeBaseCf,
            CompraCreditoFiscal creditoFiscal,
            CompraCodigoControl codigoControl,
            CompraTipoSectorId tipoSectorId,
            CompraEstadoCompraId estadoCompraId,
            CompraEstadoUsoId estadoUsoId,
            CompraImpuestoUsoId impuestoUsoId,
            CompraPeriodoUso periodoUso,
            CompraNombreFormularioUso nombreArchivoUso,
            CompraFormularioId formularioId,
            CompraVentaId ventaId,
            CompraUsuarioRegistro usuarioRegistro,
            CompraFechaRegistro fechaRegistro,
            CompraUsuarioUltimaModificacion usuarioUltimaModificacion,
            CompraFechaUltimaModificacion fechaUltimaModificacion,
            CompraEstadoId estadoId,
            CompraTipoDocumentoCliente tipoDocumentoCliente,
            CompraNumeroDocumentoCliente numeroDocumentoCliente,
            CompraComplementoDocumentoCliente complementoDocumentoCliente,
            CompraNombreCliente nombreCliente,
            CompraOrigenId origenId
    ){
        return null;

    }
    public static CompraRegistradaDomainEvent random(){
        return registrar(CompraIdMother.random(),
                CompraRecepcionIdMother.random(),
                CompraSecuenciaMother.random(),
                CompraTipoDocumentoIdMother.random(),
                CompraFechaFacturaMother.random(),
                CompraIfcProveedorNbMother.random(),
                CompraNitProveedorMother.random(),
                CompraRazonSocialProveedorMother.random(),
                CompraNumeroFacturaMother.random(),
                CompraNumeroDuiMother.random(),
                CompraCodigoAutorizacionMother.random(),
                CompraImporteTotalCompraMother.random(),
                CompraimporteNoSujetoCfMother.random(),
                CompraSubtotalMother.random(),
                CompraDescuentoMother.random(),
                CompraImporteBaseCfMother.random(),
                CompraCreditoFiscalMother.random(),
                CompraCodigoControlMother.random(),
                CompraTipoSectorIdMother.random(),
                CompraEstadoCompraIdMother.random(),
                CompraEstadoUsoIdMother.random(),
                CompraImpuestoUsoIdMother.random(),
                CompraPeriodoUsoMother.random(),
                CompraNombreArchivoUsoMother.random(),
                CompraFormularioIdMother.random(),
                CompraVentaIdMother.random(),
                CompraUsuarioRegistroMother.random(),
                CompraFechaRegistroMother.random(),
                CompraUsuarioUltimaModificacionMother.random(),
                CompraFechaUltimaModificacionMother.random(),
                CompraEstadoIdMother.random(),
                CompraTipoDocumentoClienteMother.random(),
                CompraNumeroDocumentoClienteMother.random(),
                CompraComplementoDocumentoClienteMother.random(),
                CompraNombreClienteMother.random(),
                CompraOrigenIdMother.random());
    }

    public static CompraRegistradaDomainEvent fromCompra(Compra compra) {
        return registrar(
                compra.id(),
                compra.recepcionId(),
                compra.secuencia(),
                compra.tipoDocumentoId(),
                compra.fechaFactura(),
                compra.ifcProveedorNb(),
                compra.nitProveedor(),
                compra.razonSocialProveedor(),
                compra.numeroFactura(),
                compra.numeroDui(),
                compra.codigoAutorizacion(),
                compra.importeTotalCompra(),
                compra.importeNoSujetoCf(),
                compra.subtotal(),
                compra.descuento(),
                compra.importeBaseCf(),
                compra.creditoFiscal(),
                compra.codigoControl(),
                compra.tipoSectorId(),
                compra.estadoCompraId(),
                compra.estadoUsoId(),
                compra.impuestoUsoId(),
                compra.periodoUso(),
                compra.nombreFormularioUso(),
                compra.formularioId(),
                compra.ventaId(),
                compra.usuarioRegistro(),
                compra.fechaRegistro(),
                compra.usuarioUltimaModificacion(),
                compra.fechaUltimaModificacion(),
                compra.estadoId(),
                compra.tipoDocumentoCliente(),
                compra.numeroDocumentoCliente(),
                compra.complementoDocumentoCliente(),
                compra.nombreCliente(),
                compra.origenId()
        );
    }
}
